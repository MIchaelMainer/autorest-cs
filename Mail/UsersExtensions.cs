// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Graph
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Users.
    /// </summary>
    public static partial class UsersExtensions
    {
            /// <summary>
            /// Get inferenceClassification from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static MicrosoftgraphinferenceClassification GetInferenceClassification(this IUsers operations, string userId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.GetInferenceClassificationAsync(userId, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get inferenceClassification from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphinferenceClassification> GetInferenceClassificationAsync(this IUsers operations, string userId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInferenceClassificationWithHttpMessagesAsync(userId, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the navigation property inferenceClassification in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            public static void UpdateInferenceClassification(this IUsers operations, MicrosoftgraphinferenceClassification body, string userId)
            {
                operations.UpdateInferenceClassificationAsync(body, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the navigation property inferenceClassification in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateInferenceClassificationAsync(this IUsers operations, MicrosoftgraphinferenceClassification body, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateInferenceClassificationWithHttpMessagesAsync(body, userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete navigation property inferenceClassification for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            public static void DeleteInferenceClassification(this IUsers operations, string userId, string ifMatch = default(string))
            {
                operations.DeleteInferenceClassificationAsync(userId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete navigation property inferenceClassification for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteInferenceClassificationAsync(this IUsers operations, string userId, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteInferenceClassificationWithHttpMessagesAsync(userId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get mailFolders from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static CollectionofmailFolder ListMailFolders(this IUsers operations, string userId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.ListMailFoldersAsync(userId, orderby, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get mailFolders from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionofmailFolder> ListMailFoldersAsync(this IUsers operations, string userId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMailFoldersWithHttpMessagesAsync(userId, orderby, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new navigation property to mailFolders for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            public static MicrosoftgraphmailFolder CreateMailFolders(this IUsers operations, MicrosoftgraphmailFolder body, string userId)
            {
                return operations.CreateMailFoldersAsync(body, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new navigation property to mailFolders for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphmailFolder> CreateMailFoldersAsync(this IUsers operations, MicrosoftgraphmailFolder body, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMailFoldersWithHttpMessagesAsync(body, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get mailFolders from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static MicrosoftgraphmailFolder GetMailFolders(this IUsers operations, string userId, string mailFolderId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.GetMailFoldersAsync(userId, mailFolderId, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get mailFolders from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphmailFolder> GetMailFoldersAsync(this IUsers operations, string userId, string mailFolderId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMailFoldersWithHttpMessagesAsync(userId, mailFolderId, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the navigation property mailFolders in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            public static void UpdateMailFolders(this IUsers operations, MicrosoftgraphmailFolder body, string userId, string mailFolderId)
            {
                operations.UpdateMailFoldersAsync(body, userId, mailFolderId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the navigation property mailFolders in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateMailFoldersAsync(this IUsers operations, MicrosoftgraphmailFolder body, string userId, string mailFolderId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateMailFoldersWithHttpMessagesAsync(body, userId, mailFolderId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete navigation property mailFolders for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            public static void DeleteMailFolders(this IUsers operations, string userId, string mailFolderId, string ifMatch = default(string))
            {
                operations.DeleteMailFoldersAsync(userId, mailFolderId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete navigation property mailFolders for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMailFoldersAsync(this IUsers operations, string userId, string mailFolderId, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMailFoldersWithHttpMessagesAsync(userId, mailFolderId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get messages from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static Collectionofmessage0 ListMessages(this IUsers operations, string userId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.ListMessagesAsync(userId, orderby, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get messages from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Collectionofmessage0> ListMessagesAsync(this IUsers operations, string userId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMessagesWithHttpMessagesAsync(userId, orderby, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new navigation property to messages for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            public static Microsoftgraphmessage CreateMessages(this IUsers operations, Microsoftgraphmessage body, string userId)
            {
                return operations.CreateMessagesAsync(body, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new navigation property to messages for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoftgraphmessage> CreateMessagesAsync(this IUsers operations, Microsoftgraphmessage body, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMessagesWithHttpMessagesAsync(body, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get messages from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static Microsoftgraphmessage GetMessages(this IUsers operations, string userId, string messageId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.GetMessagesAsync(userId, messageId, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get messages from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoftgraphmessage> GetMessagesAsync(this IUsers operations, string userId, string messageId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMessagesWithHttpMessagesAsync(userId, messageId, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the navigation property messages in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            public static void UpdateMessages(this IUsers operations, Microsoftgraphmessage body, string userId, string messageId)
            {
                operations.UpdateMessagesAsync(body, userId, messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the navigation property messages in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateMessagesAsync(this IUsers operations, Microsoftgraphmessage body, string userId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateMessagesWithHttpMessagesAsync(body, userId, messageId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete navigation property messages for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            public static void DeleteMessages(this IUsers operations, string userId, string messageId, string ifMatch = default(string))
            {
                operations.DeleteMessagesAsync(userId, messageId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete navigation property messages for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMessagesAsync(this IUsers operations, string userId, string messageId, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMessagesWithHttpMessagesAsync(userId, messageId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get media content for the navigation property messages from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            public static string GetMessagesContent(this IUsers operations, string userId, string messageId)
            {
                return operations.GetMessagesContentAsync(userId, messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get media content for the navigation property messages from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetMessagesContentAsync(this IUsers operations, string userId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMessagesContentWithHttpMessagesAsync(userId, messageId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update media content for the navigation property messages in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New media content.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            public static void SetMessagesContent(this IUsers operations, string body, string userId, string messageId)
            {
                operations.SetMessagesContentAsync(body, userId, messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update media content for the navigation property messages in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New media content.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetMessagesContentAsync(this IUsers operations, string body, string userId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetMessagesContentWithHttpMessagesAsync(body, userId, messageId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
