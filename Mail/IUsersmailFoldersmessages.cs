// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Graph
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// UsersmailFoldersmessages operations.
    /// </summary>
    public partial interface IUsersmailFoldersmessages
    {
        /// <summary>
        /// Get attachments from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='orderby'>
        /// Order items by property values
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Collectionofattachment>> ListAttachmentsWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create new navigation property to attachments for users
        /// </summary>
        /// <param name='body'>
        /// New navigation property
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Microsoftgraphattachment>> CreateAttachmentsWithHttpMessagesAsync(Microsoftgraphattachment body, string userId, string mailFolderId, string messageId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get attachments from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='attachmentId'>
        /// key: id of attachment
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Microsoftgraphattachment>> GetAttachmentsWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, string attachmentId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the navigation property attachments in users
        /// </summary>
        /// <param name='body'>
        /// New navigation property values
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='attachmentId'>
        /// key: id of attachment
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateAttachmentsWithHttpMessagesAsync(Microsoftgraphattachment body, string userId, string mailFolderId, string messageId, string attachmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete navigation property attachments for users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='attachmentId'>
        /// key: id of attachment
        /// </param>
        /// <param name='ifMatch'>
        /// ETag
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteAttachmentsWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, string attachmentId, string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get extensions from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='orderby'>
        /// Order items by property values
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Collectionofextension>> ListExtensionsWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create new navigation property to extensions for users
        /// </summary>
        /// <param name='body'>
        /// New navigation property
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>>> CreateExtensionsWithHttpMessagesAsync(IDictionary<string, object> body, string userId, string mailFolderId, string messageId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get extensions from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='extensionId'>
        /// key: id of extension
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>>> GetExtensionsWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, string extensionId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the navigation property extensions in users
        /// </summary>
        /// <param name='body'>
        /// New navigation property values
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='extensionId'>
        /// key: id of extension
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateExtensionsWithHttpMessagesAsync(IDictionary<string, object> body, string userId, string mailFolderId, string messageId, string extensionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete navigation property extensions for users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='extensionId'>
        /// key: id of extension
        /// </param>
        /// <param name='ifMatch'>
        /// ETag
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteExtensionsWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, string extensionId, string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get multiValueExtendedProperties from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='orderby'>
        /// Order items by property values
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<CollectionofmultiValueLegacyExtendedProperty>> ListMultiValueExtendedPropertiesWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create new navigation property to multiValueExtendedProperties for
        /// users
        /// </summary>
        /// <param name='body'>
        /// New navigation property
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MicrosoftgraphmultiValueLegacyExtendedProperty>> CreateMultiValueExtendedPropertiesWithHttpMessagesAsync(MicrosoftgraphmultiValueLegacyExtendedProperty body, string userId, string mailFolderId, string messageId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get multiValueExtendedProperties from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='multiValueLegacyExtendedPropertyId'>
        /// key: id of multiValueLegacyExtendedProperty
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MicrosoftgraphmultiValueLegacyExtendedProperty>> GetMultiValueExtendedPropertiesWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, string multiValueLegacyExtendedPropertyId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the navigation property multiValueExtendedProperties in
        /// users
        /// </summary>
        /// <param name='body'>
        /// New navigation property values
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='multiValueLegacyExtendedPropertyId'>
        /// key: id of multiValueLegacyExtendedProperty
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateMultiValueExtendedPropertiesWithHttpMessagesAsync(MicrosoftgraphmultiValueLegacyExtendedProperty body, string userId, string mailFolderId, string messageId, string multiValueLegacyExtendedPropertyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete navigation property multiValueExtendedProperties for users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='multiValueLegacyExtendedPropertyId'>
        /// key: id of multiValueLegacyExtendedProperty
        /// </param>
        /// <param name='ifMatch'>
        /// ETag
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteMultiValueExtendedPropertiesWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, string multiValueLegacyExtendedPropertyId, string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get singleValueExtendedProperties from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='orderby'>
        /// Order items by property values
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<CollectionofsingleValueLegacyExtendedProperty>> ListSingleValueExtendedPropertiesWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create new navigation property to singleValueExtendedProperties for
        /// users
        /// </summary>
        /// <param name='body'>
        /// New navigation property
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MicrosoftgraphsingleValueLegacyExtendedProperty>> CreateSingleValueExtendedPropertiesWithHttpMessagesAsync(MicrosoftgraphsingleValueLegacyExtendedProperty body, string userId, string mailFolderId, string messageId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get singleValueExtendedProperties from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='singleValueLegacyExtendedPropertyId'>
        /// key: id of singleValueLegacyExtendedProperty
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MicrosoftgraphsingleValueLegacyExtendedProperty>> GetSingleValueExtendedPropertiesWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, string singleValueLegacyExtendedPropertyId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the navigation property singleValueExtendedProperties in
        /// users
        /// </summary>
        /// <param name='body'>
        /// New navigation property values
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='singleValueLegacyExtendedPropertyId'>
        /// key: id of singleValueLegacyExtendedProperty
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateSingleValueExtendedPropertiesWithHttpMessagesAsync(MicrosoftgraphsingleValueLegacyExtendedProperty body, string userId, string mailFolderId, string messageId, string singleValueLegacyExtendedPropertyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete navigation property singleValueExtendedProperties for users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='singleValueLegacyExtendedPropertyId'>
        /// key: id of singleValueLegacyExtendedProperty
        /// </param>
        /// <param name='ifMatch'>
        /// ETag
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteSingleValueExtendedPropertiesWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, string singleValueLegacyExtendedPropertyId, string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
