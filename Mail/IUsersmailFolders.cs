// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Graph
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// UsersmailFolders operations.
    /// </summary>
    public partial interface IUsersmailFolders
    {
        /// <summary>
        /// Get childFolders from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='orderby'>
        /// Order items by property values
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<CollectionofmailFolder0>> ListChildFoldersWithHttpMessagesAsync(string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create new navigation property to childFolders for users
        /// </summary>
        /// <param name='body'>
        /// New navigation property
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MicrosoftgraphmailFolder>> CreateChildFoldersWithHttpMessagesAsync(MicrosoftgraphmailFolder body, string userId, string mailFolderId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get childFolders from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='mailFolderId1'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MicrosoftgraphmailFolder>> GetChildFoldersWithHttpMessagesAsync(string userId, string mailFolderId, string mailFolderId1, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the navigation property childFolders in users
        /// </summary>
        /// <param name='body'>
        /// New navigation property values
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='mailFolderId1'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateChildFoldersWithHttpMessagesAsync(MicrosoftgraphmailFolder body, string userId, string mailFolderId, string mailFolderId1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete navigation property childFolders for users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='mailFolderId1'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='ifMatch'>
        /// ETag
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteChildFoldersWithHttpMessagesAsync(string userId, string mailFolderId, string mailFolderId1, string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get messageRules from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='orderby'>
        /// Order items by property values
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<CollectionofmessageRule>> ListMessageRulesWithHttpMessagesAsync(string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create new navigation property to messageRules for users
        /// </summary>
        /// <param name='body'>
        /// New navigation property
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MicrosoftgraphmessageRule>> CreateMessageRulesWithHttpMessagesAsync(MicrosoftgraphmessageRule body, string userId, string mailFolderId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get messageRules from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageRuleId'>
        /// key: id of messageRule
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MicrosoftgraphmessageRule>> GetMessageRulesWithHttpMessagesAsync(string userId, string mailFolderId, string messageRuleId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the navigation property messageRules in users
        /// </summary>
        /// <param name='body'>
        /// New navigation property values
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageRuleId'>
        /// key: id of messageRule
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateMessageRulesWithHttpMessagesAsync(MicrosoftgraphmessageRule body, string userId, string mailFolderId, string messageRuleId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete navigation property messageRules for users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageRuleId'>
        /// key: id of messageRule
        /// </param>
        /// <param name='ifMatch'>
        /// ETag
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteMessageRulesWithHttpMessagesAsync(string userId, string mailFolderId, string messageRuleId, string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get messages from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='orderby'>
        /// Order items by property values
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Collectionofmessage>> ListMessagesWithHttpMessagesAsync(string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create new navigation property to messages for users
        /// </summary>
        /// <param name='body'>
        /// New navigation property
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Microsoftgraphmessage>> CreateMessagesWithHttpMessagesAsync(Microsoftgraphmessage body, string userId, string mailFolderId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get messages from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Microsoftgraphmessage>> GetMessagesWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the navigation property messages in users
        /// </summary>
        /// <param name='body'>
        /// New navigation property values
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateMessagesWithHttpMessagesAsync(Microsoftgraphmessage body, string userId, string mailFolderId, string messageId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete navigation property messages for users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='ifMatch'>
        /// ETag
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteMessagesWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get media content for the navigation property messages from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<string>> GetMessagesContentWithHttpMessagesAsync(string userId, string mailFolderId, string messageId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update media content for the navigation property messages in users
        /// </summary>
        /// <param name='body'>
        /// New media content.
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='messageId'>
        /// key: id of message
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> SetMessagesContentWithHttpMessagesAsync(string body, string userId, string mailFolderId, string messageId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get multiValueExtendedProperties from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='orderby'>
        /// Order items by property values
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<CollectionofmultiValueLegacyExtendedProperty0>> ListMultiValueExtendedPropertiesWithHttpMessagesAsync(string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create new navigation property to multiValueExtendedProperties for
        /// users
        /// </summary>
        /// <param name='body'>
        /// New navigation property
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MicrosoftgraphmultiValueLegacyExtendedProperty>> CreateMultiValueExtendedPropertiesWithHttpMessagesAsync(MicrosoftgraphmultiValueLegacyExtendedProperty body, string userId, string mailFolderId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get multiValueExtendedProperties from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='multiValueLegacyExtendedPropertyId'>
        /// key: id of multiValueLegacyExtendedProperty
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MicrosoftgraphmultiValueLegacyExtendedProperty>> GetMultiValueExtendedPropertiesWithHttpMessagesAsync(string userId, string mailFolderId, string multiValueLegacyExtendedPropertyId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the navigation property multiValueExtendedProperties in
        /// users
        /// </summary>
        /// <param name='body'>
        /// New navigation property values
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='multiValueLegacyExtendedPropertyId'>
        /// key: id of multiValueLegacyExtendedProperty
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateMultiValueExtendedPropertiesWithHttpMessagesAsync(MicrosoftgraphmultiValueLegacyExtendedProperty body, string userId, string mailFolderId, string multiValueLegacyExtendedPropertyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete navigation property multiValueExtendedProperties for users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='multiValueLegacyExtendedPropertyId'>
        /// key: id of multiValueLegacyExtendedProperty
        /// </param>
        /// <param name='ifMatch'>
        /// ETag
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteMultiValueExtendedPropertiesWithHttpMessagesAsync(string userId, string mailFolderId, string multiValueLegacyExtendedPropertyId, string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get singleValueExtendedProperties from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='orderby'>
        /// Order items by property values
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<CollectionofsingleValueLegacyExtendedProperty0>> ListSingleValueExtendedPropertiesWithHttpMessagesAsync(string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create new navigation property to singleValueExtendedProperties for
        /// users
        /// </summary>
        /// <param name='body'>
        /// New navigation property
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MicrosoftgraphsingleValueLegacyExtendedProperty>> CreateSingleValueExtendedPropertiesWithHttpMessagesAsync(MicrosoftgraphsingleValueLegacyExtendedProperty body, string userId, string mailFolderId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get singleValueExtendedProperties from users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='singleValueLegacyExtendedPropertyId'>
        /// key: id of singleValueLegacyExtendedProperty
        /// </param>
        /// <param name='select'>
        /// Select properties to be returned
        /// </param>
        /// <param name='expand'>
        /// Expand related entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MicrosoftgraphsingleValueLegacyExtendedProperty>> GetSingleValueExtendedPropertiesWithHttpMessagesAsync(string userId, string mailFolderId, string singleValueLegacyExtendedPropertyId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the navigation property singleValueExtendedProperties in
        /// users
        /// </summary>
        /// <param name='body'>
        /// New navigation property values
        /// </param>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='singleValueLegacyExtendedPropertyId'>
        /// key: id of singleValueLegacyExtendedProperty
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateSingleValueExtendedPropertiesWithHttpMessagesAsync(MicrosoftgraphsingleValueLegacyExtendedProperty body, string userId, string mailFolderId, string singleValueLegacyExtendedPropertyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete navigation property singleValueExtendedProperties for users
        /// </summary>
        /// <param name='userId'>
        /// key: id of user
        /// </param>
        /// <param name='mailFolderId'>
        /// key: id of mailFolder
        /// </param>
        /// <param name='singleValueLegacyExtendedPropertyId'>
        /// key: id of singleValueLegacyExtendedProperty
        /// </param>
        /// <param name='ifMatch'>
        /// ETag
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OdataerrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteSingleValueExtendedPropertiesWithHttpMessagesAsync(string userId, string mailFolderId, string singleValueLegacyExtendedPropertyId, string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
