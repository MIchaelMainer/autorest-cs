// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Graph
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for UsersmailFoldersmessages.
    /// </summary>
    public static partial class UsersmailFoldersmessagesExtensions
    {
            /// <summary>
            /// Get attachments from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static Collectionofattachment ListAttachments(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.ListAttachmentsAsync(userId, mailFolderId, messageId, orderby, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get attachments from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Collectionofattachment> ListAttachmentsAsync(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAttachmentsWithHttpMessagesAsync(userId, mailFolderId, messageId, orderby, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new navigation property to attachments for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            public static Microsoftgraphattachment CreateAttachments(this IUsersmailFoldersmessages operations, Microsoftgraphattachment body, string userId, string mailFolderId, string messageId)
            {
                return operations.CreateAttachmentsAsync(body, userId, mailFolderId, messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new navigation property to attachments for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoftgraphattachment> CreateAttachmentsAsync(this IUsersmailFoldersmessages operations, Microsoftgraphattachment body, string userId, string mailFolderId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAttachmentsWithHttpMessagesAsync(body, userId, mailFolderId, messageId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get attachments from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='attachmentId'>
            /// key: id of attachment
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static Microsoftgraphattachment GetAttachments(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string attachmentId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.GetAttachmentsAsync(userId, mailFolderId, messageId, attachmentId, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get attachments from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='attachmentId'>
            /// key: id of attachment
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoftgraphattachment> GetAttachmentsAsync(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string attachmentId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttachmentsWithHttpMessagesAsync(userId, mailFolderId, messageId, attachmentId, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the navigation property attachments in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='attachmentId'>
            /// key: id of attachment
            /// </param>
            public static void UpdateAttachments(this IUsersmailFoldersmessages operations, Microsoftgraphattachment body, string userId, string mailFolderId, string messageId, string attachmentId)
            {
                operations.UpdateAttachmentsAsync(body, userId, mailFolderId, messageId, attachmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the navigation property attachments in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='attachmentId'>
            /// key: id of attachment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAttachmentsAsync(this IUsersmailFoldersmessages operations, Microsoftgraphattachment body, string userId, string mailFolderId, string messageId, string attachmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateAttachmentsWithHttpMessagesAsync(body, userId, mailFolderId, messageId, attachmentId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete navigation property attachments for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='attachmentId'>
            /// key: id of attachment
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            public static void DeleteAttachments(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string attachmentId, string ifMatch = default(string))
            {
                operations.DeleteAttachmentsAsync(userId, mailFolderId, messageId, attachmentId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete navigation property attachments for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='attachmentId'>
            /// key: id of attachment
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAttachmentsAsync(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string attachmentId, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAttachmentsWithHttpMessagesAsync(userId, mailFolderId, messageId, attachmentId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get extensions from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static Collectionofextension ListExtensions(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.ListExtensionsAsync(userId, mailFolderId, messageId, orderby, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get extensions from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Collectionofextension> ListExtensionsAsync(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExtensionsWithHttpMessagesAsync(userId, mailFolderId, messageId, orderby, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new navigation property to extensions for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            public static IDictionary<string, object> CreateExtensions(this IUsersmailFoldersmessages operations, IDictionary<string, object> body, string userId, string mailFolderId, string messageId)
            {
                return operations.CreateExtensionsAsync(body, userId, mailFolderId, messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new navigation property to extensions for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> CreateExtensionsAsync(this IUsersmailFoldersmessages operations, IDictionary<string, object> body, string userId, string mailFolderId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateExtensionsWithHttpMessagesAsync(body, userId, mailFolderId, messageId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get extensions from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='extensionId'>
            /// key: id of extension
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static IDictionary<string, object> GetExtensions(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string extensionId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.GetExtensionsAsync(userId, mailFolderId, messageId, extensionId, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get extensions from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='extensionId'>
            /// key: id of extension
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> GetExtensionsAsync(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string extensionId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExtensionsWithHttpMessagesAsync(userId, mailFolderId, messageId, extensionId, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the navigation property extensions in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='extensionId'>
            /// key: id of extension
            /// </param>
            public static void UpdateExtensions(this IUsersmailFoldersmessages operations, IDictionary<string, object> body, string userId, string mailFolderId, string messageId, string extensionId)
            {
                operations.UpdateExtensionsAsync(body, userId, mailFolderId, messageId, extensionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the navigation property extensions in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='extensionId'>
            /// key: id of extension
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateExtensionsAsync(this IUsersmailFoldersmessages operations, IDictionary<string, object> body, string userId, string mailFolderId, string messageId, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateExtensionsWithHttpMessagesAsync(body, userId, mailFolderId, messageId, extensionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete navigation property extensions for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='extensionId'>
            /// key: id of extension
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            public static void DeleteExtensions(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string extensionId, string ifMatch = default(string))
            {
                operations.DeleteExtensionsAsync(userId, mailFolderId, messageId, extensionId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete navigation property extensions for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='extensionId'>
            /// key: id of extension
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteExtensionsAsync(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string extensionId, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteExtensionsWithHttpMessagesAsync(userId, mailFolderId, messageId, extensionId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get multiValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static CollectionofmultiValueLegacyExtendedProperty ListMultiValueExtendedProperties(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.ListMultiValueExtendedPropertiesAsync(userId, mailFolderId, messageId, orderby, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get multiValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionofmultiValueLegacyExtendedProperty> ListMultiValueExtendedPropertiesAsync(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiValueExtendedPropertiesWithHttpMessagesAsync(userId, mailFolderId, messageId, orderby, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new navigation property to multiValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            public static MicrosoftgraphmultiValueLegacyExtendedProperty CreateMultiValueExtendedProperties(this IUsersmailFoldersmessages operations, MicrosoftgraphmultiValueLegacyExtendedProperty body, string userId, string mailFolderId, string messageId)
            {
                return operations.CreateMultiValueExtendedPropertiesAsync(body, userId, mailFolderId, messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new navigation property to multiValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphmultiValueLegacyExtendedProperty> CreateMultiValueExtendedPropertiesAsync(this IUsersmailFoldersmessages operations, MicrosoftgraphmultiValueLegacyExtendedProperty body, string userId, string mailFolderId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMultiValueExtendedPropertiesWithHttpMessagesAsync(body, userId, mailFolderId, messageId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get multiValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='multiValueLegacyExtendedPropertyId'>
            /// key: id of multiValueLegacyExtendedProperty
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static MicrosoftgraphmultiValueLegacyExtendedProperty GetMultiValueExtendedProperties(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string multiValueLegacyExtendedPropertyId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.GetMultiValueExtendedPropertiesAsync(userId, mailFolderId, messageId, multiValueLegacyExtendedPropertyId, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get multiValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='multiValueLegacyExtendedPropertyId'>
            /// key: id of multiValueLegacyExtendedProperty
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphmultiValueLegacyExtendedProperty> GetMultiValueExtendedPropertiesAsync(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string multiValueLegacyExtendedPropertyId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiValueExtendedPropertiesWithHttpMessagesAsync(userId, mailFolderId, messageId, multiValueLegacyExtendedPropertyId, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the navigation property multiValueExtendedProperties in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='multiValueLegacyExtendedPropertyId'>
            /// key: id of multiValueLegacyExtendedProperty
            /// </param>
            public static void UpdateMultiValueExtendedProperties(this IUsersmailFoldersmessages operations, MicrosoftgraphmultiValueLegacyExtendedProperty body, string userId, string mailFolderId, string messageId, string multiValueLegacyExtendedPropertyId)
            {
                operations.UpdateMultiValueExtendedPropertiesAsync(body, userId, mailFolderId, messageId, multiValueLegacyExtendedPropertyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the navigation property multiValueExtendedProperties in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='multiValueLegacyExtendedPropertyId'>
            /// key: id of multiValueLegacyExtendedProperty
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateMultiValueExtendedPropertiesAsync(this IUsersmailFoldersmessages operations, MicrosoftgraphmultiValueLegacyExtendedProperty body, string userId, string mailFolderId, string messageId, string multiValueLegacyExtendedPropertyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateMultiValueExtendedPropertiesWithHttpMessagesAsync(body, userId, mailFolderId, messageId, multiValueLegacyExtendedPropertyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete navigation property multiValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='multiValueLegacyExtendedPropertyId'>
            /// key: id of multiValueLegacyExtendedProperty
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            public static void DeleteMultiValueExtendedProperties(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string multiValueLegacyExtendedPropertyId, string ifMatch = default(string))
            {
                operations.DeleteMultiValueExtendedPropertiesAsync(userId, mailFolderId, messageId, multiValueLegacyExtendedPropertyId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete navigation property multiValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='multiValueLegacyExtendedPropertyId'>
            /// key: id of multiValueLegacyExtendedProperty
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMultiValueExtendedPropertiesAsync(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string multiValueLegacyExtendedPropertyId, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMultiValueExtendedPropertiesWithHttpMessagesAsync(userId, mailFolderId, messageId, multiValueLegacyExtendedPropertyId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get singleValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static CollectionofsingleValueLegacyExtendedProperty ListSingleValueExtendedProperties(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.ListSingleValueExtendedPropertiesAsync(userId, mailFolderId, messageId, orderby, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get singleValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionofsingleValueLegacyExtendedProperty> ListSingleValueExtendedPropertiesAsync(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSingleValueExtendedPropertiesWithHttpMessagesAsync(userId, mailFolderId, messageId, orderby, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new navigation property to singleValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            public static MicrosoftgraphsingleValueLegacyExtendedProperty CreateSingleValueExtendedProperties(this IUsersmailFoldersmessages operations, MicrosoftgraphsingleValueLegacyExtendedProperty body, string userId, string mailFolderId, string messageId)
            {
                return operations.CreateSingleValueExtendedPropertiesAsync(body, userId, mailFolderId, messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new navigation property to singleValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphsingleValueLegacyExtendedProperty> CreateSingleValueExtendedPropertiesAsync(this IUsersmailFoldersmessages operations, MicrosoftgraphsingleValueLegacyExtendedProperty body, string userId, string mailFolderId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSingleValueExtendedPropertiesWithHttpMessagesAsync(body, userId, mailFolderId, messageId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get singleValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='singleValueLegacyExtendedPropertyId'>
            /// key: id of singleValueLegacyExtendedProperty
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static MicrosoftgraphsingleValueLegacyExtendedProperty GetSingleValueExtendedProperties(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string singleValueLegacyExtendedPropertyId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.GetSingleValueExtendedPropertiesAsync(userId, mailFolderId, messageId, singleValueLegacyExtendedPropertyId, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get singleValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='singleValueLegacyExtendedPropertyId'>
            /// key: id of singleValueLegacyExtendedProperty
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphsingleValueLegacyExtendedProperty> GetSingleValueExtendedPropertiesAsync(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string singleValueLegacyExtendedPropertyId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSingleValueExtendedPropertiesWithHttpMessagesAsync(userId, mailFolderId, messageId, singleValueLegacyExtendedPropertyId, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the navigation property singleValueExtendedProperties in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='singleValueLegacyExtendedPropertyId'>
            /// key: id of singleValueLegacyExtendedProperty
            /// </param>
            public static void UpdateSingleValueExtendedProperties(this IUsersmailFoldersmessages operations, MicrosoftgraphsingleValueLegacyExtendedProperty body, string userId, string mailFolderId, string messageId, string singleValueLegacyExtendedPropertyId)
            {
                operations.UpdateSingleValueExtendedPropertiesAsync(body, userId, mailFolderId, messageId, singleValueLegacyExtendedPropertyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the navigation property singleValueExtendedProperties in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='singleValueLegacyExtendedPropertyId'>
            /// key: id of singleValueLegacyExtendedProperty
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateSingleValueExtendedPropertiesAsync(this IUsersmailFoldersmessages operations, MicrosoftgraphsingleValueLegacyExtendedProperty body, string userId, string mailFolderId, string messageId, string singleValueLegacyExtendedPropertyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateSingleValueExtendedPropertiesWithHttpMessagesAsync(body, userId, mailFolderId, messageId, singleValueLegacyExtendedPropertyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete navigation property singleValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='singleValueLegacyExtendedPropertyId'>
            /// key: id of singleValueLegacyExtendedProperty
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            public static void DeleteSingleValueExtendedProperties(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string singleValueLegacyExtendedPropertyId, string ifMatch = default(string))
            {
                operations.DeleteSingleValueExtendedPropertiesAsync(userId, mailFolderId, messageId, singleValueLegacyExtendedPropertyId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete navigation property singleValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='singleValueLegacyExtendedPropertyId'>
            /// key: id of singleValueLegacyExtendedProperty
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSingleValueExtendedPropertiesAsync(this IUsersmailFoldersmessages operations, string userId, string mailFolderId, string messageId, string singleValueLegacyExtendedPropertyId, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSingleValueExtendedPropertiesWithHttpMessagesAsync(userId, mailFolderId, messageId, singleValueLegacyExtendedPropertyId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
