// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Graph.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// attachment
    /// </summary>
    public partial class Microsoftgraphattachment : Microsoftgraphentity
    {
        /// <summary>
        /// Initializes a new instance of the Microsoftgraphattachment class.
        /// </summary>
        public Microsoftgraphattachment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Microsoftgraphattachment class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="id">Read-only.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="contentType">The MIME type.</param>
        /// <param name="isInline">true if the attachment is an inline
        /// attachment; otherwise, false.</param>
        /// <param name="lastModifiedDateTime">The Timestamp type represents
        /// date and time information using ISO 8601 format and is always in
        /// UTC time. For example, midnight UTC on Jan 1, 2014 would look like
        /// this: '2014-01-01T00:00:00Z'</param>
        /// <param name="name">The attachment's file name.</param>
        /// <param name="size">The length of the attachment in bytes.</param>
        public Microsoftgraphattachment(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string id = default(string), string contentType = default(string), bool? isInline = default(bool?), System.DateTime? lastModifiedDateTime = default(System.DateTime?), string name = default(string), int? size = default(int?))
            : base(additionalProperties, id)
        {
            // AdditionalProperties = additionalProperties;
            ContentType = contentType;
            IsInline = isInline;
            LastModifiedDateTime = lastModifiedDateTime;
            Name = name;
            Size = size;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        // [JsonExtensionData]
        // public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets the MIME type.
        /// </summary>
        [JsonProperty(PropertyName = "contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or sets true if the attachment is an inline attachment;
        /// otherwise, false.
        /// </summary>
        [JsonProperty(PropertyName = "isInline")]
        public bool? IsInline { get; set; }

        /// <summary>
        /// Gets or sets the Timestamp type represents date and time
        /// information using ISO 8601 format and is always in UTC time. For
        /// example, midnight UTC on Jan 1, 2014 would look like this:
        /// '2014-01-01T00:00:00Z'
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDateTime")]
        public System.DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the attachment's file name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the length of the attachment in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public int? Size { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Size != null)
            {
                if (Size > 2147483647)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "Size", 2147483647);
                }
                if (Size < -2147483648)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "Size", -2147483648);
                }
            }
        }
    }
}
