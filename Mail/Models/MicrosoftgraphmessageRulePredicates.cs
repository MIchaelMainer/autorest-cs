// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Graph.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// messageRulePredicates
    /// </summary>
    public partial class MicrosoftgraphmessageRulePredicates
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphmessageRulePredicates class.
        /// </summary>
        public MicrosoftgraphmessageRulePredicates()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphmessageRulePredicates class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="bodyContains">Represents the strings that should
        /// appear in the body of an incoming message in order for the
        /// condition or exception to apply.</param>
        /// <param name="bodyOrSubjectContains">Represents the strings that
        /// should appear in the body or subject of an incoming message in
        /// order for the condition or exception to apply.</param>
        /// <param name="categories">Represents the categories that an incoming
        /// message should be labeled with in order for the condition or
        /// exception to apply.</param>
        /// <param name="fromAddresses">Represents the specific sender email
        /// addresses of an incoming message in order for the condition or
        /// exception to apply.</param>
        /// <param name="hasAttachments">Indicates whether an incoming message
        /// must have attachments in order for the condition or exception to
        /// apply.</param>
        /// <param name="headerContains">Represents the strings that appear in
        /// the headers of an incoming message in order for the condition or
        /// exception to apply.</param>
        /// <param name="importance">Possible values include: 'low', 'normal',
        /// 'high'</param>
        /// <param name="isApprovalRequest">Indicates whether an incoming
        /// message must be an approval request in order for the condition or
        /// exception to apply.</param>
        /// <param name="isAutomaticForward">Indicates whether an incoming
        /// message must be automatically forwarded in order for the condition
        /// or exception to apply.</param>
        /// <param name="isAutomaticReply">Indicates whether an incoming
        /// message must be an auto reply in order for the condition or
        /// exception to apply.</param>
        /// <param name="isEncrypted">Indicates whether an incoming message
        /// must be encrypted in order for the condition or exception to
        /// apply.</param>
        /// <param name="isMeetingRequest">Indicates whether an incoming
        /// message must be a meeting request in order for the condition or
        /// exception to apply.</param>
        /// <param name="isMeetingResponse">Indicates whether an incoming
        /// message must be a meeting response in order for the condition or
        /// exception to apply.</param>
        /// <param name="isNonDeliveryReport">Indicates whether an incoming
        /// message must be a non-delivery report in order for the condition or
        /// exception to apply.</param>
        /// <param name="isPermissionControlled">Indicates whether an incoming
        /// message must be permission controlled (RMS-protected) in order for
        /// the condition or exception to apply.</param>
        /// <param name="isReadReceipt">Indicates whether an incoming message
        /// must be a read receipt in order for the condition or exception to
        /// apply.</param>
        /// <param name="isSigned">Indicates whether an incoming message must
        /// be S/MIME-signed in order for the condition or exception to
        /// apply.</param>
        /// <param name="isVoicemail">Indicates whether an incoming message
        /// must be a voice mail in order for the condition or exception to
        /// apply.</param>
        /// <param name="messageActionFlag">Possible values include: 'any',
        /// 'call', 'doNotForward', 'followUp', 'fyi', 'forward',
        /// 'noResponseNecessary', 'read', 'reply', 'replyToAll',
        /// 'review'</param>
        /// <param name="notSentToMe">Indicates whether the owner of the
        /// mailbox must not be a recipient of an incoming message in order for
        /// the condition or exception to apply.</param>
        /// <param name="recipientContains">Represents the strings that appear
        /// in either the toRecipients or ccRecipients properties of an
        /// incoming message in order for the condition or exception to
        /// apply.</param>
        /// <param name="senderContains">Represents the strings that appear in
        /// the from property of an incoming message in order for the condition
        /// or exception to apply.</param>
        /// <param name="sensitivity">Possible values include: 'normal',
        /// 'personal', 'private', 'confidential'</param>
        /// <param name="sentCcMe">Indicates whether the owner of the mailbox
        /// must be in the ccRecipients property of an incoming message in
        /// order for the condition or exception to apply.</param>
        /// <param name="sentOnlyToMe">Indicates whether the owner of the
        /// mailbox must be the only recipient in an incoming message in order
        /// for the condition or exception to apply.</param>
        /// <param name="sentToAddresses">Represents the email addresses that
        /// an incoming message must have been sent to in order for the
        /// condition or exception to apply.</param>
        /// <param name="sentToMe">Indicates whether the owner of the mailbox
        /// must be in the toRecipients property of an incoming message in
        /// order for the condition or exception to apply.</param>
        /// <param name="sentToOrCcMe">Indicates whether the owner of the
        /// mailbox must be in either a toRecipients or ccRecipients property
        /// of an incoming message in order for the condition or exception to
        /// apply.</param>
        /// <param name="subjectContains">Represents the strings that appear in
        /// the subject of an incoming message in order for the condition or
        /// exception to apply.</param>
        public MicrosoftgraphmessageRulePredicates(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), IList<string> bodyContains = default(IList<string>), IList<string> bodyOrSubjectContains = default(IList<string>), IList<string> categories = default(IList<string>), IList<Microsoftgraphrecipient> fromAddresses = default(IList<Microsoftgraphrecipient>), bool? hasAttachments = default(bool?), IList<string> headerContains = default(IList<string>), string importance = default(string), bool? isApprovalRequest = default(bool?), bool? isAutomaticForward = default(bool?), bool? isAutomaticReply = default(bool?), bool? isEncrypted = default(bool?), bool? isMeetingRequest = default(bool?), bool? isMeetingResponse = default(bool?), bool? isNonDeliveryReport = default(bool?), bool? isPermissionControlled = default(bool?), bool? isReadReceipt = default(bool?), bool? isSigned = default(bool?), bool? isVoicemail = default(bool?), string messageActionFlag = default(string), bool? notSentToMe = default(bool?), IList<string> recipientContains = default(IList<string>), IList<string> senderContains = default(IList<string>), string sensitivity = default(string), bool? sentCcMe = default(bool?), bool? sentOnlyToMe = default(bool?), IList<Microsoftgraphrecipient> sentToAddresses = default(IList<Microsoftgraphrecipient>), bool? sentToMe = default(bool?), bool? sentToOrCcMe = default(bool?), IList<string> subjectContains = default(IList<string>), MicrosoftgraphsizeRange withinSizeRange = default(MicrosoftgraphsizeRange))
        {
            AdditionalProperties = additionalProperties;
            BodyContains = bodyContains;
            BodyOrSubjectContains = bodyOrSubjectContains;
            Categories = categories;
            FromAddresses = fromAddresses;
            HasAttachments = hasAttachments;
            HeaderContains = headerContains;
            Importance = importance;
            IsApprovalRequest = isApprovalRequest;
            IsAutomaticForward = isAutomaticForward;
            IsAutomaticReply = isAutomaticReply;
            IsEncrypted = isEncrypted;
            IsMeetingRequest = isMeetingRequest;
            IsMeetingResponse = isMeetingResponse;
            IsNonDeliveryReport = isNonDeliveryReport;
            IsPermissionControlled = isPermissionControlled;
            IsReadReceipt = isReadReceipt;
            IsSigned = isSigned;
            IsVoicemail = isVoicemail;
            MessageActionFlag = messageActionFlag;
            NotSentToMe = notSentToMe;
            RecipientContains = recipientContains;
            SenderContains = senderContains;
            Sensitivity = sensitivity;
            SentCcMe = sentCcMe;
            SentOnlyToMe = sentOnlyToMe;
            SentToAddresses = sentToAddresses;
            SentToMe = sentToMe;
            SentToOrCcMe = sentToOrCcMe;
            SubjectContains = subjectContains;
            WithinSizeRange = withinSizeRange;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets represents the strings that should appear in the body
        /// of an incoming message in order for the condition or exception to
        /// apply.
        /// </summary>
        [JsonProperty(PropertyName = "bodyContains")]
        public IList<string> BodyContains { get; set; }

        /// <summary>
        /// Gets or sets represents the strings that should appear in the body
        /// or subject of an incoming message in order for the condition or
        /// exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "bodyOrSubjectContains")]
        public IList<string> BodyOrSubjectContains { get; set; }

        /// <summary>
        /// Gets or sets represents the categories that an incoming message
        /// should be labeled with in order for the condition or exception to
        /// apply.
        /// </summary>
        [JsonProperty(PropertyName = "categories")]
        public IList<string> Categories { get; set; }

        /// <summary>
        /// Gets or sets represents the specific sender email addresses of an
        /// incoming message in order for the condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "fromAddresses")]
        public IList<Microsoftgraphrecipient> FromAddresses { get; set; }

        /// <summary>
        /// Gets or sets indicates whether an incoming message must have
        /// attachments in order for the condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "hasAttachments")]
        public bool? HasAttachments { get; set; }

        /// <summary>
        /// Gets or sets represents the strings that appear in the headers of
        /// an incoming message in order for the condition or exception to
        /// apply.
        /// </summary>
        [JsonProperty(PropertyName = "headerContains")]
        public IList<string> HeaderContains { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'low', 'normal', 'high'
        /// </summary>
        [JsonProperty(PropertyName = "importance")]
        public string Importance { get; set; }

        /// <summary>
        /// Gets or sets indicates whether an incoming message must be an
        /// approval request in order for the condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "isApprovalRequest")]
        public bool? IsApprovalRequest { get; set; }

        /// <summary>
        /// Gets or sets indicates whether an incoming message must be
        /// automatically forwarded in order for the condition or exception to
        /// apply.
        /// </summary>
        [JsonProperty(PropertyName = "isAutomaticForward")]
        public bool? IsAutomaticForward { get; set; }

        /// <summary>
        /// Gets or sets indicates whether an incoming message must be an auto
        /// reply in order for the condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "isAutomaticReply")]
        public bool? IsAutomaticReply { get; set; }

        /// <summary>
        /// Gets or sets indicates whether an incoming message must be
        /// encrypted in order for the condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "isEncrypted")]
        public bool? IsEncrypted { get; set; }

        /// <summary>
        /// Gets or sets indicates whether an incoming message must be a
        /// meeting request in order for the condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "isMeetingRequest")]
        public bool? IsMeetingRequest { get; set; }

        /// <summary>
        /// Gets or sets indicates whether an incoming message must be a
        /// meeting response in order for the condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "isMeetingResponse")]
        public bool? IsMeetingResponse { get; set; }

        /// <summary>
        /// Gets or sets indicates whether an incoming message must be a
        /// non-delivery report in order for the condition or exception to
        /// apply.
        /// </summary>
        [JsonProperty(PropertyName = "isNonDeliveryReport")]
        public bool? IsNonDeliveryReport { get; set; }

        /// <summary>
        /// Gets or sets indicates whether an incoming message must be
        /// permission controlled (RMS-protected) in order for the condition or
        /// exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "isPermissionControlled")]
        public bool? IsPermissionControlled { get; set; }

        /// <summary>
        /// Gets or sets indicates whether an incoming message must be a read
        /// receipt in order for the condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "isReadReceipt")]
        public bool? IsReadReceipt { get; set; }

        /// <summary>
        /// Gets or sets indicates whether an incoming message must be
        /// S/MIME-signed in order for the condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "isSigned")]
        public bool? IsSigned { get; set; }

        /// <summary>
        /// Gets or sets indicates whether an incoming message must be a voice
        /// mail in order for the condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "isVoicemail")]
        public bool? IsVoicemail { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'any', 'call',
        /// 'doNotForward', 'followUp', 'fyi', 'forward',
        /// 'noResponseNecessary', 'read', 'reply', 'replyToAll', 'review'
        /// </summary>
        [JsonProperty(PropertyName = "messageActionFlag")]
        public string MessageActionFlag { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the owner of the mailbox must not be
        /// a recipient of an incoming message in order for the condition or
        /// exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "notSentToMe")]
        public bool? NotSentToMe { get; set; }

        /// <summary>
        /// Gets or sets represents the strings that appear in either the
        /// toRecipients or ccRecipients properties of an incoming message in
        /// order for the condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "recipientContains")]
        public IList<string> RecipientContains { get; set; }

        /// <summary>
        /// Gets or sets represents the strings that appear in the from
        /// property of an incoming message in order for the condition or
        /// exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "senderContains")]
        public IList<string> SenderContains { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'normal', 'personal',
        /// 'private', 'confidential'
        /// </summary>
        [JsonProperty(PropertyName = "sensitivity")]
        public string Sensitivity { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the owner of the mailbox must be in
        /// the ccRecipients property of an incoming message in order for the
        /// condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "sentCcMe")]
        public bool? SentCcMe { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the owner of the mailbox must be the
        /// only recipient in an incoming message in order for the condition or
        /// exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "sentOnlyToMe")]
        public bool? SentOnlyToMe { get; set; }

        /// <summary>
        /// Gets or sets represents the email addresses that an incoming
        /// message must have been sent to in order for the condition or
        /// exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "sentToAddresses")]
        public IList<Microsoftgraphrecipient> SentToAddresses { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the owner of the mailbox must be in
        /// the toRecipients property of an incoming message in order for the
        /// condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "sentToMe")]
        public bool? SentToMe { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the owner of the mailbox must be in
        /// either a toRecipients or ccRecipients property of an incoming
        /// message in order for the condition or exception to apply.
        /// </summary>
        [JsonProperty(PropertyName = "sentToOrCcMe")]
        public bool? SentToOrCcMe { get; set; }

        /// <summary>
        /// Gets or sets represents the strings that appear in the subject of
        /// an incoming message in order for the condition or exception to
        /// apply.
        /// </summary>
        [JsonProperty(PropertyName = "subjectContains")]
        public IList<string> SubjectContains { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "withinSizeRange")]
        public MicrosoftgraphsizeRange WithinSizeRange { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (WithinSizeRange != null)
            {
                WithinSizeRange.Validate();
            }
        }
    }
}
