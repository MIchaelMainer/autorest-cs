// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Graph
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for UsersmailFolders.
    /// </summary>
    public static partial class UsersmailFoldersExtensions
    {
            /// <summary>
            /// Get childFolders from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static CollectionofmailFolder0 ListChildFolders(this IUsersmailFolders operations, string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.ListChildFoldersAsync(userId, mailFolderId, orderby, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get childFolders from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionofmailFolder0> ListChildFoldersAsync(this IUsersmailFolders operations, string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListChildFoldersWithHttpMessagesAsync(userId, mailFolderId, orderby, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new navigation property to childFolders for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            public static MicrosoftgraphmailFolder CreateChildFolders(this IUsersmailFolders operations, MicrosoftgraphmailFolder body, string userId, string mailFolderId)
            {
                return operations.CreateChildFoldersAsync(body, userId, mailFolderId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new navigation property to childFolders for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphmailFolder> CreateChildFoldersAsync(this IUsersmailFolders operations, MicrosoftgraphmailFolder body, string userId, string mailFolderId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateChildFoldersWithHttpMessagesAsync(body, userId, mailFolderId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get childFolders from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='mailFolderId1'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static MicrosoftgraphmailFolder GetChildFolders(this IUsersmailFolders operations, string userId, string mailFolderId, string mailFolderId1, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.GetChildFoldersAsync(userId, mailFolderId, mailFolderId1, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get childFolders from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='mailFolderId1'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphmailFolder> GetChildFoldersAsync(this IUsersmailFolders operations, string userId, string mailFolderId, string mailFolderId1, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChildFoldersWithHttpMessagesAsync(userId, mailFolderId, mailFolderId1, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the navigation property childFolders in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='mailFolderId1'>
            /// key: id of mailFolder
            /// </param>
            public static void UpdateChildFolders(this IUsersmailFolders operations, MicrosoftgraphmailFolder body, string userId, string mailFolderId, string mailFolderId1)
            {
                operations.UpdateChildFoldersAsync(body, userId, mailFolderId, mailFolderId1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the navigation property childFolders in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='mailFolderId1'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateChildFoldersAsync(this IUsersmailFolders operations, MicrosoftgraphmailFolder body, string userId, string mailFolderId, string mailFolderId1, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateChildFoldersWithHttpMessagesAsync(body, userId, mailFolderId, mailFolderId1, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete navigation property childFolders for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='mailFolderId1'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            public static void DeleteChildFolders(this IUsersmailFolders operations, string userId, string mailFolderId, string mailFolderId1, string ifMatch = default(string))
            {
                operations.DeleteChildFoldersAsync(userId, mailFolderId, mailFolderId1, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete navigation property childFolders for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='mailFolderId1'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteChildFoldersAsync(this IUsersmailFolders operations, string userId, string mailFolderId, string mailFolderId1, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteChildFoldersWithHttpMessagesAsync(userId, mailFolderId, mailFolderId1, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get messageRules from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static CollectionofmessageRule ListMessageRules(this IUsersmailFolders operations, string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.ListMessageRulesAsync(userId, mailFolderId, orderby, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get messageRules from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionofmessageRule> ListMessageRulesAsync(this IUsersmailFolders operations, string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMessageRulesWithHttpMessagesAsync(userId, mailFolderId, orderby, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new navigation property to messageRules for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            public static MicrosoftgraphmessageRule CreateMessageRules(this IUsersmailFolders operations, MicrosoftgraphmessageRule body, string userId, string mailFolderId)
            {
                return operations.CreateMessageRulesAsync(body, userId, mailFolderId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new navigation property to messageRules for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphmessageRule> CreateMessageRulesAsync(this IUsersmailFolders operations, MicrosoftgraphmessageRule body, string userId, string mailFolderId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMessageRulesWithHttpMessagesAsync(body, userId, mailFolderId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get messageRules from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageRuleId'>
            /// key: id of messageRule
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static MicrosoftgraphmessageRule GetMessageRules(this IUsersmailFolders operations, string userId, string mailFolderId, string messageRuleId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.GetMessageRulesAsync(userId, mailFolderId, messageRuleId, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get messageRules from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageRuleId'>
            /// key: id of messageRule
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphmessageRule> GetMessageRulesAsync(this IUsersmailFolders operations, string userId, string mailFolderId, string messageRuleId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMessageRulesWithHttpMessagesAsync(userId, mailFolderId, messageRuleId, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the navigation property messageRules in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageRuleId'>
            /// key: id of messageRule
            /// </param>
            public static void UpdateMessageRules(this IUsersmailFolders operations, MicrosoftgraphmessageRule body, string userId, string mailFolderId, string messageRuleId)
            {
                operations.UpdateMessageRulesAsync(body, userId, mailFolderId, messageRuleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the navigation property messageRules in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageRuleId'>
            /// key: id of messageRule
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateMessageRulesAsync(this IUsersmailFolders operations, MicrosoftgraphmessageRule body, string userId, string mailFolderId, string messageRuleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateMessageRulesWithHttpMessagesAsync(body, userId, mailFolderId, messageRuleId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete navigation property messageRules for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageRuleId'>
            /// key: id of messageRule
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            public static void DeleteMessageRules(this IUsersmailFolders operations, string userId, string mailFolderId, string messageRuleId, string ifMatch = default(string))
            {
                operations.DeleteMessageRulesAsync(userId, mailFolderId, messageRuleId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete navigation property messageRules for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageRuleId'>
            /// key: id of messageRule
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMessageRulesAsync(this IUsersmailFolders operations, string userId, string mailFolderId, string messageRuleId, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMessageRulesWithHttpMessagesAsync(userId, mailFolderId, messageRuleId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get messages from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static Collectionofmessage ListMessages(this IUsersmailFolders operations, string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.ListMessagesAsync(userId, mailFolderId, orderby, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get messages from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Collectionofmessage> ListMessagesAsync(this IUsersmailFolders operations, string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMessagesWithHttpMessagesAsync(userId, mailFolderId, orderby, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new navigation property to messages for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            public static Microsoftgraphmessage CreateMessages(this IUsersmailFolders operations, Microsoftgraphmessage body, string userId, string mailFolderId)
            {
                return operations.CreateMessagesAsync(body, userId, mailFolderId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new navigation property to messages for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoftgraphmessage> CreateMessagesAsync(this IUsersmailFolders operations, Microsoftgraphmessage body, string userId, string mailFolderId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMessagesWithHttpMessagesAsync(body, userId, mailFolderId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get messages from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static Microsoftgraphmessage GetMessages(this IUsersmailFolders operations, string userId, string mailFolderId, string messageId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.GetMessagesAsync(userId, mailFolderId, messageId, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get messages from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoftgraphmessage> GetMessagesAsync(this IUsersmailFolders operations, string userId, string mailFolderId, string messageId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMessagesWithHttpMessagesAsync(userId, mailFolderId, messageId, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the navigation property messages in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            public static void UpdateMessages(this IUsersmailFolders operations, Microsoftgraphmessage body, string userId, string mailFolderId, string messageId)
            {
                operations.UpdateMessagesAsync(body, userId, mailFolderId, messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the navigation property messages in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateMessagesAsync(this IUsersmailFolders operations, Microsoftgraphmessage body, string userId, string mailFolderId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateMessagesWithHttpMessagesAsync(body, userId, mailFolderId, messageId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete navigation property messages for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            public static void DeleteMessages(this IUsersmailFolders operations, string userId, string mailFolderId, string messageId, string ifMatch = default(string))
            {
                operations.DeleteMessagesAsync(userId, mailFolderId, messageId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete navigation property messages for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMessagesAsync(this IUsersmailFolders operations, string userId, string mailFolderId, string messageId, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMessagesWithHttpMessagesAsync(userId, mailFolderId, messageId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get media content for the navigation property messages from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            public static string GetMessagesContent(this IUsersmailFolders operations, string userId, string mailFolderId, string messageId)
            {
                return operations.GetMessagesContentAsync(userId, mailFolderId, messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get media content for the navigation property messages from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetMessagesContentAsync(this IUsersmailFolders operations, string userId, string mailFolderId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMessagesContentWithHttpMessagesAsync(userId, mailFolderId, messageId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update media content for the navigation property messages in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New media content.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            public static void SetMessagesContent(this IUsersmailFolders operations, string body, string userId, string mailFolderId, string messageId)
            {
                operations.SetMessagesContentAsync(body, userId, mailFolderId, messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update media content for the navigation property messages in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New media content.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='messageId'>
            /// key: id of message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetMessagesContentAsync(this IUsersmailFolders operations, string body, string userId, string mailFolderId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetMessagesContentWithHttpMessagesAsync(body, userId, mailFolderId, messageId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get multiValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static CollectionofmultiValueLegacyExtendedProperty0 ListMultiValueExtendedProperties(this IUsersmailFolders operations, string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.ListMultiValueExtendedPropertiesAsync(userId, mailFolderId, orderby, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get multiValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionofmultiValueLegacyExtendedProperty0> ListMultiValueExtendedPropertiesAsync(this IUsersmailFolders operations, string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiValueExtendedPropertiesWithHttpMessagesAsync(userId, mailFolderId, orderby, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new navigation property to multiValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            public static MicrosoftgraphmultiValueLegacyExtendedProperty CreateMultiValueExtendedProperties(this IUsersmailFolders operations, MicrosoftgraphmultiValueLegacyExtendedProperty body, string userId, string mailFolderId)
            {
                return operations.CreateMultiValueExtendedPropertiesAsync(body, userId, mailFolderId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new navigation property to multiValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphmultiValueLegacyExtendedProperty> CreateMultiValueExtendedPropertiesAsync(this IUsersmailFolders operations, MicrosoftgraphmultiValueLegacyExtendedProperty body, string userId, string mailFolderId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMultiValueExtendedPropertiesWithHttpMessagesAsync(body, userId, mailFolderId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get multiValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='multiValueLegacyExtendedPropertyId'>
            /// key: id of multiValueLegacyExtendedProperty
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static MicrosoftgraphmultiValueLegacyExtendedProperty GetMultiValueExtendedProperties(this IUsersmailFolders operations, string userId, string mailFolderId, string multiValueLegacyExtendedPropertyId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.GetMultiValueExtendedPropertiesAsync(userId, mailFolderId, multiValueLegacyExtendedPropertyId, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get multiValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='multiValueLegacyExtendedPropertyId'>
            /// key: id of multiValueLegacyExtendedProperty
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphmultiValueLegacyExtendedProperty> GetMultiValueExtendedPropertiesAsync(this IUsersmailFolders operations, string userId, string mailFolderId, string multiValueLegacyExtendedPropertyId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiValueExtendedPropertiesWithHttpMessagesAsync(userId, mailFolderId, multiValueLegacyExtendedPropertyId, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the navigation property multiValueExtendedProperties in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='multiValueLegacyExtendedPropertyId'>
            /// key: id of multiValueLegacyExtendedProperty
            /// </param>
            public static void UpdateMultiValueExtendedProperties(this IUsersmailFolders operations, MicrosoftgraphmultiValueLegacyExtendedProperty body, string userId, string mailFolderId, string multiValueLegacyExtendedPropertyId)
            {
                operations.UpdateMultiValueExtendedPropertiesAsync(body, userId, mailFolderId, multiValueLegacyExtendedPropertyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the navigation property multiValueExtendedProperties in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='multiValueLegacyExtendedPropertyId'>
            /// key: id of multiValueLegacyExtendedProperty
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateMultiValueExtendedPropertiesAsync(this IUsersmailFolders operations, MicrosoftgraphmultiValueLegacyExtendedProperty body, string userId, string mailFolderId, string multiValueLegacyExtendedPropertyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateMultiValueExtendedPropertiesWithHttpMessagesAsync(body, userId, mailFolderId, multiValueLegacyExtendedPropertyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete navigation property multiValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='multiValueLegacyExtendedPropertyId'>
            /// key: id of multiValueLegacyExtendedProperty
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            public static void DeleteMultiValueExtendedProperties(this IUsersmailFolders operations, string userId, string mailFolderId, string multiValueLegacyExtendedPropertyId, string ifMatch = default(string))
            {
                operations.DeleteMultiValueExtendedPropertiesAsync(userId, mailFolderId, multiValueLegacyExtendedPropertyId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete navigation property multiValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='multiValueLegacyExtendedPropertyId'>
            /// key: id of multiValueLegacyExtendedProperty
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMultiValueExtendedPropertiesAsync(this IUsersmailFolders operations, string userId, string mailFolderId, string multiValueLegacyExtendedPropertyId, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMultiValueExtendedPropertiesWithHttpMessagesAsync(userId, mailFolderId, multiValueLegacyExtendedPropertyId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get singleValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static CollectionofsingleValueLegacyExtendedProperty0 ListSingleValueExtendedProperties(this IUsersmailFolders operations, string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.ListSingleValueExtendedPropertiesAsync(userId, mailFolderId, orderby, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get singleValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='orderby'>
            /// Order items by property values
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionofsingleValueLegacyExtendedProperty0> ListSingleValueExtendedPropertiesAsync(this IUsersmailFolders operations, string userId, string mailFolderId, IList<string> orderby = default(IList<string>), IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSingleValueExtendedPropertiesWithHttpMessagesAsync(userId, mailFolderId, orderby, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new navigation property to singleValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            public static MicrosoftgraphsingleValueLegacyExtendedProperty CreateSingleValueExtendedProperties(this IUsersmailFolders operations, MicrosoftgraphsingleValueLegacyExtendedProperty body, string userId, string mailFolderId)
            {
                return operations.CreateSingleValueExtendedPropertiesAsync(body, userId, mailFolderId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new navigation property to singleValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphsingleValueLegacyExtendedProperty> CreateSingleValueExtendedPropertiesAsync(this IUsersmailFolders operations, MicrosoftgraphsingleValueLegacyExtendedProperty body, string userId, string mailFolderId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSingleValueExtendedPropertiesWithHttpMessagesAsync(body, userId, mailFolderId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get singleValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='singleValueLegacyExtendedPropertyId'>
            /// key: id of singleValueLegacyExtendedProperty
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static MicrosoftgraphsingleValueLegacyExtendedProperty GetSingleValueExtendedProperties(this IUsersmailFolders operations, string userId, string mailFolderId, string singleValueLegacyExtendedPropertyId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.GetSingleValueExtendedPropertiesAsync(userId, mailFolderId, singleValueLegacyExtendedPropertyId, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get singleValueExtendedProperties from users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='singleValueLegacyExtendedPropertyId'>
            /// key: id of singleValueLegacyExtendedProperty
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftgraphsingleValueLegacyExtendedProperty> GetSingleValueExtendedPropertiesAsync(this IUsersmailFolders operations, string userId, string mailFolderId, string singleValueLegacyExtendedPropertyId, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSingleValueExtendedPropertiesWithHttpMessagesAsync(userId, mailFolderId, singleValueLegacyExtendedPropertyId, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the navigation property singleValueExtendedProperties in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='singleValueLegacyExtendedPropertyId'>
            /// key: id of singleValueLegacyExtendedProperty
            /// </param>
            public static void UpdateSingleValueExtendedProperties(this IUsersmailFolders operations, MicrosoftgraphsingleValueLegacyExtendedProperty body, string userId, string mailFolderId, string singleValueLegacyExtendedPropertyId)
            {
                operations.UpdateSingleValueExtendedPropertiesAsync(body, userId, mailFolderId, singleValueLegacyExtendedPropertyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the navigation property singleValueExtendedProperties in users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New navigation property values
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='singleValueLegacyExtendedPropertyId'>
            /// key: id of singleValueLegacyExtendedProperty
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateSingleValueExtendedPropertiesAsync(this IUsersmailFolders operations, MicrosoftgraphsingleValueLegacyExtendedProperty body, string userId, string mailFolderId, string singleValueLegacyExtendedPropertyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateSingleValueExtendedPropertiesWithHttpMessagesAsync(body, userId, mailFolderId, singleValueLegacyExtendedPropertyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete navigation property singleValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='singleValueLegacyExtendedPropertyId'>
            /// key: id of singleValueLegacyExtendedProperty
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            public static void DeleteSingleValueExtendedProperties(this IUsersmailFolders operations, string userId, string mailFolderId, string singleValueLegacyExtendedPropertyId, string ifMatch = default(string))
            {
                operations.DeleteSingleValueExtendedPropertiesAsync(userId, mailFolderId, singleValueLegacyExtendedPropertyId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete navigation property singleValueExtendedProperties for users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// key: id of user
            /// </param>
            /// <param name='mailFolderId'>
            /// key: id of mailFolder
            /// </param>
            /// <param name='singleValueLegacyExtendedPropertyId'>
            /// key: id of singleValueLegacyExtendedProperty
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSingleValueExtendedPropertiesAsync(this IUsersmailFolders operations, string userId, string mailFolderId, string singleValueLegacyExtendedPropertyId, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSingleValueExtendedPropertiesWithHttpMessagesAsync(userId, mailFolderId, singleValueLegacyExtendedPropertyId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
